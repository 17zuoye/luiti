#!/usr/bin/env python
#-*-coding:utf-8-*-

# 从 tasks 和 files 两个维度思考

import os, sys
import argparse
from collections import defaultdict
from datetime import datetime

curr_dir  = os.getcwd()
sys.path.insert(0, curr_dir) # delete me TODO


import luigi
from luiti import TaskUtils
import luiti.manager as manager


# 1. parser
parser_main    = argparse.ArgumentParser(description="Luiti tasks manager..")
subparsers     = parser_main.add_subparsers(title="subcommands", description='valid subcommands',)

# 1.1. parser tasks
parser_tasks   = subparsers.add_parser('tasks', help=u"manage luiti tasks.")
parser_tasks.add_argument("ls",            help=u"print current avaiable luiti tasks." )
parser_tasks.add_argument("--project-dir", help=u"force use another project directory.", default=curr_dir)

# 1.2. parser files
parser_files   = subparsers.add_parser('files', help=u"manage files that outputed by luiti tasks.")

parser_files.add_argument('rm', nargs=1, )
# TODO add ls by `add_mutually_exclusive_group`
#parser_files_group = parser_files.add_mutually_exclusive_group(required=True)
#parser_files_group.add_argument('ls',      action='store_true', default=None, )
#parser_files_group.add_argument('rm',      action='store_true', default=None, )


parser_files.add_argument('--task-name',         help=u"必须指定任务名称，比如 --task-name=Redmine5954ParentReportWeek",   required=True, )
parser_files.add_argument('--date-range',        help=u"必须指定时间周期，比如 --date-range=20141001-20141015",            required=True, )
parser_files.add_argument('--dry',               help=u"可以指定 **假运行** 模式 , 比如 --dry=true。",                     default=True,  choices=['true', 'false'])
parser_files.add_argument('--no-dep',            help=u"可以指定 --no-dep=true，这样就不会寻找依赖于当前Task之上的任务",   default=False, choices=['true', 'false'])
parser_files.add_argument('--force',             help=u"强制删除文件",                                                     default=False, choices=['true', 'false'])
parser_files.add_argument("--project-dir",       help=u"force use another project directory.", default=curr_dir)



if len(sys.argv) == 1:
    parser_main.print_help()
    exit(0)


args_main  = parser_main.parse_args()
subcommand = sys.argv[1]

project_dirs = manager.Path.find_all_luiti_tasks_dirs(args_main.project_dir)
result       = manager.Loader.load_all_tasks(*project_dirs)
all_task_classes = [i1['task_cls'] for i1 in result['success']]

#import pdb; pdb.set_trace()
if subcommand == "tasks":
    if args_main.ls:
        manager.Table.print_all_tasks(result)

if subcommand == "files":
    curr_task = TaskUtils.load_task(args_main.task_name)
    dep_tasks_on_curr_task = [curr_task]
    if not args_main.no_dep:
        dep_tasks_on_curr_task = manager.Dep.find_dep_on_tasks(curr_task, all_task_classes)

    if args_main.rm:
        dep_files = manager.Files.get_all_date_files(args_main.date_range, dep_tasks_on_curr_task)
        manager.Table.print_files_by_task_cls_and_date_range(
                                curr_task,
                                args_main,
                                {
                                    "dep_files"                 : dep_files,
                                    "task_classes_count"        : len(dep_tasks_on_curr_task),
                                    "dep_tasks_on_curr_task"    : dep_tasks_on_curr_task,
                                })

        if args_main.dry:
            print "\nTips: just set --dry=false to soft-delete theses files.\n"
        else:
            manager.Files.soft_delete_files(dep_files)
